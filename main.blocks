<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="lv^L)vxq{_8brErmH`^!" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="ec|Sk;F-zxb963,+Z})I" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class UI {" line1="    static countdown (length: number = 3) { // Do a countdown for length seconds, the default is three" line2="        for (let i = length; i &gt; 0; i--) { " line3="            basic.showNumber(i);  " line4="            basic.pause(1000);" line5="        }" line6="        basic.clearScreen();" line7="    }" line8="}" numlines="9"></mutation><next><block type="typescript_statement" id="6e#IPipYhg}-c9y*E.Fu" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class Timer {" line1="    private startTime: number;" line2="    private stopTime: number;" line3="    private hasStopped: boolean;" line4="    toSeconds(): number {" line5="        return (this.stopTime - this.startTime) / 1000;" line6="    }" line7="    start() {" line8="        this.hasStopped = false;" line9="        this.startTime = control.millis();" line10="    }" line11="    stop() {" line12="        this.hasStopped = true;" line13="        this.stopTime = control.millis();" line14="    }" line15="}" numlines="16"></mutation><next><block type="typescript_statement" id=".qRS,?SNmge7EuoahZ^|" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="class ReactionGame {" line1="    private startButton: Button;             // Define the Button to start the game" line2="    private player1Pin: TouchPin;            // Define the Button the first player has to hit" line3="    private player2Pin: Button;              // Define the Button the second player has to hit" line4="    private player1Light: AnalogPin;         // Define the Light for the first player" line5="    private player2Light: AnalogPin;         // Define the Light for the second player" line6="    private winnerNum: number = 0;           // Make sure we keep track of who won" line7="    private hasStarted: boolean = false;     // Make sure that it does not run more than once at a time" line8="    private timer: Timer = new Timer();      // Create a timer object" line9="" line10="    constructor (player1Pin: TouchPin, player2Pin: Button, startButton: Button = Button.A, player1Light: AnalogPin, player2Light: AnalogPin) {" line11="        this.startButton = startButton;  // Assign the Variables to the class so it" line12="        this.player1Pin = player1Pin;    // can access them later" line13="        this.player2Pin = player2Pin;" line14="        this.player1Light = player1Light;" line15="        this.player2Light = player2Light;" line16="    }" line17="" line18="    public init() {" line19="        input.onButtonPressed(this.startButton, function () { // Run the start function " line20="            this.onStart();                                   // when the start button" line21="        });                                                   // is pressed" line22="" line23="        input.onPinPressed(this.player1Pin, function () { " line24="            if (this.hasStarted) {  // Make sure there is actually a game running" line25="                this.win(1);        // Announce that player 2 has won" line26="            }" line27="        });" line28="        input.onButtonPressed(this.player2Pin, function () {" line29="            if (this.hasStarted) {  // Make sure there is actually a game running" line30="                this.win(2);        // Announce that player 2 has won" line31="            }" line32="        });" line33="        " line34="        // Make sure Everything is off" line35="        pins.analogWritePin(this.player1Light, 0);" line36="        pins.analogWritePin(this.player2Light, 0);" line37="        basic.clearScreen();" line38="        this.winnerNum = 0;" line39="        this.hasStarted = false;" line40="    }" line41="" line42="    private onStart () {" line43="        if (this.hasStarted) { // Make sure the Game hasn't already started" line44="            return; // if it has stop" line45="        }" line46="" line47="        UI.countdown(3); // Do the Countdown" line48="" line49="        basic.pause(1000); // Make sure the time is not less than one second" line50="        basic.pause(Math.random() * 5000); // Wait for a random amount of time, up to 5 seconds" line51="" line52="        this.hasStarted = true; // Allow button presses to be calculated" line53="        basic.plotLeds(`" line54="        # # # # #" line55="        # # # # #" line56="        # # # # #" line57="        # # # # #" line58="        # # # # #`); // Show the Alert that they should press the buttons" line59="" line60="        this.timer.start(); // Start the timer" line61="        " line62="    }" line63="" line64="    private win(winner: number) {" line65="        this.winnerNum = winner;   // Keep track of who won" line66="        basic.clearScreen();       // Clear the screen" line67="        this.showScore();          // Call the function to show the score" line68="    }" line69="" line70="    private showScore() {" line71="        if (this.winnerNum == 1) {" line72="            pins.analogWritePin(this.player1Light, 512);     // Make the winners light turn on" line73="            pins.analogSetPeriod(this.player1Light, 250000); // Make it flash" line74="        } else {" line75="            pins.analogWritePin(this.player2Light, 512);     // Make the winners light turn on" line76="            pins.analogSetPeriod(this.player2Light, 250000); // Make it flash" line77="        }" line78="" line79="        this.timer.stop(); // Stop the Timer" line80="        for (let j = 0; j &lt; 3; j++) {                  // Repeat three times" line81="            basic.showNumber(this.timer.toSeconds());      // Show the winners score" line82="            basic.pause(500);                              // Wait a bit" line83="        }" line84="" line85="        this.init(); // Restart the Cycle" line86="    }" line87="}" numlines="88"></mutation></block></next></block></next></block></statement></block></xml>